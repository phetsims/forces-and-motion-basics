none:                                  None
force:                                 Force
values:                                Values
redWins:                               Red Wins!
frictionForce:                         Friction Force
pause:                                 Pause
friction:                              Friction
forces-and-motion-basics.title:        'Forces and Motion: Basics'
leftForce:                             Left Force
appliedForce:                          Applied Force
rightForce:                            Right Force
pattern.0massUnitsKilograms:           '{0} kg'
pattern.0valueUnitsNewtons:            '{0} newtons'
acceleration:                          Acceleration
pattern.0name.1valueUnitsAcceleration: '{0}: {1} m/s<sup>2</sup>'
pattern.0name.1valueUnitsVelocity:     '{0} m/s'
lots:                                  Lots
forces:                                Forces
netForce:                              Net Force
motion:                                Motion
go:                                    Go!
sumOfForcesEqualsZero:                 Sum of Forces = 0
blueWins:                              Blue Wins!
sumOfForces:                           Sum of Forces
speed:                                 Speed
stopwatch:                             Stopwatch
return:                                Return
masses:                                Masses
pattern.0valueUnitsN:                  '{0}N'
unknownValueIndicator:                 '?'
netForcePullerColors:                  Net Force Puller Colors
blueAndRed:                            Blue and Red
purpleAndOrange:                       Purple and Orange
purpleWins:                            Purple Wins!
orangeWins:                            Orange Wins!

# keyboard help dialog strings
keyboardHelpDialog:
  fromAnywhereInScreen: From Anywhere in Screen
  startGame:            Start tug-of-war game
  pauseGame:            Pause tug-of-war game
  returnCartToCenter:   Return cart to center
  pullerNavigation:     Puller Navigation
  selectPuller:         Select puller
  grabPuller:           Grab selected puller
  moveGrabbedPuller:    Move grabbed puller
  dropPuller:           Drop puller
  objectNavigation:     Object Navigation
  selectObject:         Select object
  grabObject:           Grab selected object
  moveGrabbedObject:    Move grabbed object
  dropObject:           Drop object
  adjustAppliedForce:   Adjust Applied Force
  zeroAppliedForce:     Set applied force to zero
  returnToToolbox:      Return to toolbox
  cancelMovement:       Cancel movement

# accessibility strings
a11y:
  navigable: navigable
  sortable:  sortable
  valuesCheckbox:
    checkedResponse:                          Numeric values shown.
    uncheckedResponse:                        Numeric values hidden.
    accessibleHelpTextForce:                  Show or hide force values.
    accessibleHelpTextForceSpeed:             Show or hide force and speed values.
    accessibleHelpTextForceSpeedAcceleration: Show or hide force, speed, and acceleration values.
  speedCheckbox:
    accessibleHelpText:                 Show or hide speedometer.
    accessibleContextResponseUnchecked: Speedometer hidden.
  preferences:
    netForcePullerColorControl:
      accessibleHelpText: Select team colors for tug-of-war game.
  keyboardHelpDialog:
    fromAnywhereInSim:
      startGameDescription:          Start tug-of-war game with { $altOrOptionKey } plus G key.
      pauseGameDescription:          Pause tug-of-war game with { $altOrOptionKey } plus P key.
      returnCartToCenterDescription: Return cart to center with { $altOrOptionKey } plus C key.
    pullerNavigation:
      selectPullerDescription:      Select puller with Left and Right Arrow keys or A and D keys.
      grabPullerDescription:        Grab selected puller with Space or Enter keys.
      moveGrabbedPullerDescription: Move grabbed puller with Left and Right Arrow keys or A and D keys.
      dropPullerDescription:        Drop puller with Space or Enter keys.
      returnToToolboxDescription:   Return grabbed puller to toolbox with Delete or Backspace keys.
      cancelMovement:               Cancel movement with Escape key.
    objectNavigation:
      selectObjectDescription:      Select object with Left and Right Arrow keys or A and D keys.
      grabObjectDescription:        Grab selected object with Space or Enter keys.
      moveGrabbedObjectDescription: Move grabbed object with Left and Right Arrow keys or A and D keys.
      dropObjectDescription:        Drop object with Space or Enter keys.
      returnToToolboxDescription:   Return grabbed object to toolbox with Delete or Backspace keys.
      cancelMovement:               Cancel movement with Escape key.
    adjustAppliedForce:
      zeroAppliedForceDescription: Set applied force to zero with 0 key.
  netForceScreen:
    screenButtonsHelpText: Explore net force in a tug-of-war game.
    colorName:             |-
                           { $color ->
                               [blue]   Blue
                               [red]    Red
                               [purple] Purple
                              *[orange] Orange
                           }
    teamName:              |-
                           { $color ->
                               [blue]   Blue Team
                               [red]    Red Team
                               [purple] Purple Team
                              *[orange] Orange Team
                           }
    screenSummary:
      playArea:
        description: There is a tug-of-war game between { $leftColor } and { $rightColor } teams over a wheeled cart full of candy. { $leftTeamName } pullers are on left, { $rightTeamName } pullers are on right. Cart sits on flat surface with a rope attached to each side. Ropes have knots that pullers can grab. There are buttons to start or pause tug-of-war or return cart to center.
      controlArea:
        description: You can turn on sum of forces, values, or speed. Reset sim to start over.
      currentDetails:
        accessibleNameNotStarted: Currently, tug-of-war game not started.
        accessibleNameInProgress: Currently, tug-of-war game in progress.
        accessibleNameCompleted:  Currently, tug-of-war game completed.
        noPullersAttached:        No pullers attached to ropes.
        teamAttached:             |-
                                  { $count ->
                                    [0] No { a11y.netForceScreen.colorName } pullers are on rope.
                                    [one] { $count } { a11y.netForceScreen.colorName } puller is on rope.
                                   *[other] { $count } { a11y.netForceScreen.colorName } pullers are on rope.
                                  }
      interactionHint: Place pullers on knots to begin tug-of-war game.
    puller:
      # Note that index may be the empty string. This string will always be trimmed() removing whitespace.
      accessibleName:            '{ a11y.netForceScreen.puller.size } { a11y.netForceScreen.colorName } Puller { $index }'
      accessibleRoleDescription: navigable
      size:                      |-
                                 { $size ->
                                   [small] Small
                                   [medium] Medium
                                  *[large] Large
                                 }
    pullerGroup:
      accessibleRoleDescription: group
    pullerResponses:
      pullerAttachedToKnot:       '{ a11y.netForceScreen.puller.accessibleName } attached to { $knotDescription }.'
      pullerReturnedToToolbox:    '{ a11y.netForceScreen.puller.accessibleName } returned to toolbox.'
      pullerInteractionCancelled: '{ a11y.netForceScreen.puller.accessibleName } interaction cancelled.'
    returnButton:
      cartReturnedToCenter: Cart returned to center.
      accessibleName:       Return Cart
      accessibleHelpText:   Return cart to center.
    goPauseButton:
      accessibleHelpTextGo:    Start tug-of-war game.
      accessibleHelpTextPause: Pause tug-of-war game.
      cartMovingLeft:          Cart moving left.
      cartMovingRight:         Cart moving right.
      cartStationary:          Cart stationary.
      cartPaused:              Cart paused.
    netForceControlPanel:
      sumOfForces:
        accessibleHelpText:                 Show or hide sum of forces arrow.
        accessibleContextResponseUnchecked: Sum of forces arrow hidden.
    playAreaControls:
      accessibleHeading: Tug-of-War Controls
  motionScreen:
    motionScreenButtonsHelpText:       Create a stack of objects and give them a push to explore motion.
    frictionScreenButtonsHelpText:     Experiment with friction when pushing a stack of objects.
    accelerationScreenButtonsHelpText: Measure the acceleration when pushing a stack of objects.
    screenSummary:
      playArea:
        motionDescription:       A pusher stands on the flat ground, ready to apply force to a stack of objects on a skateboard. Objects can be moved from the toolbox to the stack.
        frictionDescription:     A pusher stands on the flat ground, ready to apply force to a stack of objects. Objects can be moved from the toolbox to the stack.
        accelerationDescription: A pusher stands on the flat ground, ready to apply force to a stack of objects. Objects can be moved from the toolbox to the stack.
      controlArea:
        motionDescription:       You can turn on forces, values, or measurement tools. Reset sim to start over.
        frictionDescription:     You can turn on forces, values, or measurement tools. The Friction slider sets the roughness of the ground. Reset sim to start over.
        accelerationDescription: '{ a11y.motionScreen.screenSummary.controlArea.frictionDescription }'
      currentDetails:
        summary: |-
                 { $count ->
                   [0]      Currently, no objects on the { $surface }.
                   [1]      Currently, 1 object on the { $surface }. Stack is { $motionState }.
                  *[other]  Currently, { $count } objects on the { $surface }. Stack is { $motionState }.
                 }
      interactionHint: Create a stack of objects and give them a push.
    pauseButton:
      accessibleHelpText: Pause sim to step through little by little and to help make precise measurements.
    stackMovement:
      stackMovingLeft:  Stack moving left.
      stackMovingRight: Stack moving right.
      stackStationary:  Stack stationary.
    stackState:
      stationary:  stationary
      movingRight: moving right
      movingLeft:  moving left
    objects:
      objectAccessibleNameWithMass: '{ $objectName }, { $mass }'
      massUnknown:                  mass unknown
      names:
        fridge:  Fridge
        crate1:  Crate 1
        crate2:  Crate 2
        girl:    Girl
        man:     Man
        trash:   Trash Can
        mystery: Mystery Object
        bucket:  Bucket of Water
    objectToolbox:
      accessibleName:            Object Toolbox
      accessibleRoleDescription: group
      descriptionContent:        Grab object. Once grabbed, use keyboard shortcuts to move object.
    objectStackGroup:
      onSkateboard:
        accessibleName: Objects on Skateboard
      onGround:
        accessibleName: Objects on Ground
      accessibleRoleDescription: group
      descriptionContent:        Grab object. Once grabbed, use keyboard shortcuts to move object.
    objectResponses:
      overToolbox:                        Over toolbox
      overStack:                          Over stack
      overSkateboard:                     Over skateboard
      overGround:                         Over ground
      grabbed:                            Grabbed
      droppedOnStack:                     Dropped on stack
      droppedOnStackBottomObjectReturned: Dropped on stack. Bottom object returned to toolbox.
      droppedOnSkateboard:                Dropped on skateboard
      droppedOnGround:                    Dropped on ground
      returnedToToolbox:                  Returned to toolbox
      returnedToStack:                    Returned to stack
    surface:
      skateboard: skateboard
      ground:     ground
    stackList:
      stackedOnSurface:   'Objects on { $surface }:'
      noObjectsOnSurface: 'No objects on { $surface }.'
    pusherResponses:
      fellDownAppliedForceZero: Pusher fell down, applied force now 0 newtons.
    motionControlPanel:
      forceCheckbox:
        accessibleHelpText:                 Show or hide applied force arrow.
        accessibleContextResponseChecked:   Applied force arrow shown.
        accessibleContextResponseUnchecked: Applied force arrow hidden.
      massesCheckbox:
        accessibleHelpText:                 Show or hide masses of objects.
        accessibleContextResponseChecked:   Mass values shown.
        accessibleContextResponseUnchecked: Mass values hidden.
      stopwatchCheckbox:
        accessibleHelpText:                 Show or hide stopwatch.
        accessibleContextResponseChecked:   Stopwatch added to Play Area.
        accessibleContextResponseUnchecked: Stopwatch removed from Play Area.
      forcesCheckbox:
        accessibleHelpText:                 Show or hide applied force and friction force arrows.
        accessibleContextResponseChecked:   Force arrows shown.
        accessibleContextResponseUnchecked: Force arrows hidden.
      sumOfForcesCheckbox:
        accessibleHelpText:                 Check to show an arrow representing the sum of all forces.
        accessibleContextResponseUnchecked: Sum of forces arrow hidden.
      accelerationCheckbox:
        accessibleHelpText:                 Show or hide accelerometer.
        accessibleContextResponseUnchecked: Accelerometer hidden.
    playAreaControls:
      appliedForceControl:
        accessibleHeading: Applied Force Control
        description:       Set force applied by pusher on the stack.
    frictionSlider:
      accessibleHelpText: Set static coefficient of friction, ranging from none to lots.
      contextResponse:
        smoother: Ground smoother.
        rougher:  Ground rougher.
        icy:      Ground icy.
  objectToolboxes:
    objectToolbox: Object Toolbox
    skateboard:    Stack on Skateboard
    stack:         Stack
  pullers:
    pullerInstruction:   Grab puller. Once grabbed, use keyboard shortcuts to change position. Knots are numbered from left-to-right.
    overReturnToToolbox: Over toolbox
    overKnotDescription: |-
                         { $side ->
                             [left] Over left knot { $number ->
                             [1] 1, furthest from cart
                             [4] 4, closest to cart
                             *[other] { $number }
                           }
                             *[right] Over right knot { $number ->
                             [1] 1, closest to cart
                             [4] 4, furthest from cart
                             *[other] { $number }
                           }
                         }
    knotDescription:     '{ $side } knot { $number }'
    leftSide:            Left
    rightSide:           Right
  tugOfWar:
    heading:         Tug-of-War for Candy Cart
    list:
      leadingParagraph: 'Pullers attached to ropes, from left-to-right:'
    noPullersOnRope: No pullers on rope
    knotOccupied:    '{ $side } knot { $number }: { $pullerName }'
  forces:
    netForceScreenHeading:   Forces on Candy Cart
    motionScreensHeading:    Forces on Stack
    appliedForceArrow:       'Applied force arrow is { $description }, pointing { $direction }'
    frictionForceArrow:      'Friction force arrow is { $description }, pointing { $direction }'
    leftForceArrow:          'Left force arrow is { $description }'
    rightForceArrow:         'Right force arrow is { $description }'
    sumOfForcesArrow:        'Sum of forces arrow is { $description }, pointing { $direction }'
    sumOfForcesZero:         'Sum of forces is 0'
    noForcesDisplayed:       'No forces displayed.'

    # Duplicated with the implementation in scenery-phet so it has the correct type signature (i.e., one numeric variable).
    quantitativeDescription: |-
                             { $forceMagnitude ->
                               [one] { $forceMagnitude } newton
                               *[other] { $forceMagnitude } newtons
                             }
    qualitativeDescriptions:
      verySmall:      very small
      small:          small
      medium:         medium
      somewhatLarge:  somewhat large
      large:          large
      veryLarge:      very large
      extremelyLarge: extremely large
      left:           left
      right:          right
  speed:
    heading:                       Speed
    cartSpeed:                     'Cart speed is { $speedDescription }.'
    cartSpeedWithAcceleration:     'Cart speed is { $speedDescription } and { $accelerationDescription }.'
    speedOnly:                     'Speed is { $speedDescription }.'
    speedOnlyWithAcceleration:     'Speed is { $speedDescription } and { $accelerationDescription }.'

    # Duplicated with the implementation in scenery-phet so it has the correct type signature (i.e., one numeric variable).
    speedWithValue:                |-
                                   Speed is { $speedDescription } at { $speedMetersPerSecond ->
                                     [one] { $speedMetersPerSecond } meter per second
                                     *[other] { $speedMetersPerSecond } meters per second
                                   }.

    # Duplicated with the implementation in scenery-phet so it has the correct type signature (i.e., one numeric variable).
    speedWithValueAndAcceleration: |-
                                   Speed is { $speedDescription } and { $accelerationDescription } at { $speedMetersPerSecond ->
                                     [one] { $speedMetersPerSecond } meter per second
                                     *[other] { $speedMetersPerSecond } meters per second
                                   }.
    qualitativeDescriptions:
      stationary:    zero
      verySlow:      very slow
      slow:          slow
      moderate:      moderate
      fast:          fast
      veryFast:      very fast
      extremelyFast: extremely fast
  acceleration:
    heading:                           Acceleration
    accelerationOnly:                  'Acceleration is { $accelerationDescription }.'

    # Duplicated with the implementation in scenery-phet so it has the correct type signature (i.e., one numeric variable).
    accelerationWithValue:             |-
                                       Acceleration is { $accelerationDescription } at { $accelerationMetersPerSecondSquared ->
                                         [one] { $accelerationMetersPerSecondSquared } meter per second squared
                                         *[other] { $accelerationMetersPerSecondSquared } meters per second squared
                                       }.
    accelerationWithDirection:         'Acceleration is { $accelerationDescription } to the { $direction }.'

    # Duplicated with the implementation in scenery-phet so it has the correct type signature (i.e., one numeric variable).
    accelerationWithDirectionAndValue: |-
                                       Acceleration is { $accelerationDescription } to the { $direction } at { $accelerationMetersPerSecondSquared ->
                                         [one] { $accelerationMetersPerSecondSquared } meter per second squared
                                         *[other] { $accelerationMetersPerSecondSquared } meters per second squared
                                       }.
    qualitativeDescriptions:
      zero:           zero
      verySmall:      very small
      small:          small
      moderate:       moderate
      large:          large
      veryLarge:      very large
      extremelyLarge: extremely large
      left:           left
      right:          right
    accelerationDescriptions:
      speedingUp:  speeding up
      slowingDown: slowing down
